name: Tests & Coverage

on:
  pull_request:
  push:
    branches: [ main ]

# Needed for Pages deploy + PR checks publishing
permissions:
  contents: read
  pages: write
  id-token: write
  checks: write            # for creating check runs (test results publisher)
  pull-requests: write     # optional, for PR comments/annotations

jobs:
  test:
    name: Build, Test, Coverage
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore

      # ---- OPTION A (default): coverlet via MSBuild props, single deterministic output
      - name: Test with coverage (fail under 75%)
        run: |
          set -e
          ROOT="$(pwd)"
          OUTDIR="$ROOT/TestResults/coverage"
          mkdir -p "$OUTDIR"
          dotnet test --no-build --configuration Release \
            --logger "trx;LogFileName=test-results.trx" \
            /p:CollectCoverage=true \
            /p:CoverletOutput="$OUTDIR/coverage" \
            /p:CoverletOutputFormat=cobertura \
            /p:Threshold=75 \
            /p:ThresholdType=line \
            /p:ThresholdStat=total

          echo "---- locate cobertura files (debug) ----"
          find "$ROOT" -type f -name "coverage.cobertura.xml" -print || true

      # ---- OPTION B (alternative): built-in collector (uncomment both steps and remove Option A above)
      # - name: Test with coverage via DataCollector (XPlat)
      #   run: |
      #     set -e
      #     dotnet test --no-build --configuration Release \
      #       --logger "trx;LogFileName=test-results.trx" \
      #       --collect:"XPlat Code Coverage"
      #     echo "---- locate cobertura files (debug) ----"
      #     find "$(pwd)" -type f -name "coverage.cobertura.xml" -print || true

      # Publish TRX into PR as a check (safe for non-fork runs)
      - name: Publish unit test results to PR
        if: ${{ github.event_name == 'pull_request' && !github.event.pull_request.head.repo.fork && always() }}
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          files: |
            **/test-results.trx
            **/TestResults/**/*.trx

      # Generate HTML coverage + badges (robust: exact path or glob; never hard-fail)
      - name: Generate coverage HTML & badges
        if: ${{ always() }}
        run: |
          set -e
          dotnet tool update -g dotnet-reportgenerator-globaltool
          export PATH="$PATH:/github/home/.dotnet/tools"

          # Prefer deterministic location from Option A; otherwise fall back to a glob
          if [ -f "TestResults/coverage/coverage.cobertura.xml" ]; then
            SRC="TestResults/coverage/coverage.cobertura.xml"
          else
            # Works for Option B or multi-project outputs
            SRC="**/TestResults/**/coverage.cobertura.xml"
          fi

          echo "Using reports pattern: $SRC"
          # If nothing matches, create an empty site but don't fail
          if compgen -G "$SRC" > /dev/null; then
            reportgenerator \
              -reports:"$SRC" \
              -targetdir:"coverage-report" \
              -reporttypes:"Html;HtmlSummary;MarkdownSummaryGithub;Badges"
          else
            echo "No coverage files found; creating placeholder site."
            mkdir -p coverage-report
            cat > coverage-report/index.html <<'HTML'
            <!doctype html><meta charset="utf-8">
            <title>Coverage</title>
            <h1>No coverage files found for this run.</h1>
            <p>Check the workflow logs for details.</p>
            HTML
          fi

      # Upload artifacts so you can inspect from the Actions UI
      - name: Upload artifacts (TRX + coverage HTML)
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: test-and-coverage-artifacts
          path: |
            **/TestResults/**/*.trx
            coverage-report/**

      # Add a short coverage summary to the job/PR summary
      - name: Add coverage summary to PR
        if: ${{ always() }}
        run: |
          if [ -f "coverage-report/SummaryGithub.md" ]; then
            echo "## Code Coverage" >> "$GITHUB_STEP_SUMMARY"
            cat coverage-report/SummaryGithub.md >> "$GITHUB_STEP_SUMMARY"
          else
            echo "_No coverage report generated._" >> "$GITHUB_STEP_SUMMARY"
          fi

      # Prepare Pages site (defensive: always produces an index)
      - name: Prepare site for Pages
        if: ${{ always() }}
        run: |
          set -e
          rm -rf site
          mkdir -p site
          if [ -d "coverage-report" ] && [ "$(ls -A coverage-report)" ]; then
            cp -r coverage-report/* site/ || true
          fi
          mkdir -p site/tests
          find . -type f -name "*.trx" -exec cp {} site/tests/ \; || true
          if [ ! -f site/index.html ]; then
            cat > site/index.html <<'HTML'
            <!doctype html><meta charset="utf-8">
            <title>Test & Coverage Reports</title>
            <h1>Test & Coverage Reports</h1>
            <p>No coverage site for this run. TRX files are under <a href="./tests/">/tests/</a>.</p>
            HTML
          fi

      # Pages deploy only from main
      - name: Configure Pages
        if: ${{ github.ref == 'refs/heads/main' && always() }}
        uses: actions/configure-pages@v5

      - name: Upload site artifact for Pages
        if: ${{ github.ref == 'refs/heads/main' && always() }}
        uses: actions/upload-pages-artifact@v3
        with:
          path: site

      - name: Deploy to GitHub Pages
        if: ${{ github.ref == 'refs/heads/main' && always() }}
        uses: actions/deploy-pages@v4
        # with:
        #   token: ${{ secrets.GITHUB_TOKEN }}   # usually not needed; default works
        #   preview: false
